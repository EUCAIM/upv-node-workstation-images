ARG TENSOR_IMAGE_TAG=""
ARG CUDA_VERSION=""
ARG TARGET_VERSION="unknown"

## Uncomment or include in "docker build --build-arg" for building with CUDA
#ARG TENSOR_IMAGE_TAG="-gpu"
#ARG CUDA_VERSION="cuda10"

FROM tensorflow/tensorflow:2.3.1$TENSOR_IMAGE_TAG

LABEL name="ubuntu_python_tensorflow"
LABEL version="${TARGET_VERSION}$CUDA_VERSION"
LABEL description="Container with ubuntu 18.04 (bionic), python 3.6.9, ${CUDA_VERSION} and tensorflow 2.3.1."

# Fix for "apt-get update" error "The nvidia repository is no longer signed"
RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub

# Get the image up to date and install utility tools
RUN apt-get -y update && \
    apt-get -y install --no-install-recommends \
        bash-completion ca-certificates curl iputils-ping netcat \
        man-db net-tools traceroute vim python-xattr parallel \
        python-pip python3-pip gnupg2 xattr pv bsdmainutils  \
        libsm6 libxrender1 libxext6 libgl1-mesa-glx  && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* 

# Install necessary packages (first upgrade pip and keyrings because ubuntu package is not always up-to-date)
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir --upgrade keyrings.alt && \
    pip install --no-cache-dir opencv-contrib-python keras && \ 
    pip install --no-cache-dir -U scikit-learn && \
    pip install --no-cache-dir matplotlib scikit-image pandas pydicom

# Install poetry: popular dependecies manager, and used in the Quibim platform to install dependencies required for the image analysis modules.
# And disable virtual environments (in a container usually there is only one project, one environment)
RUN pip install --no-cache-dir poetry && poetry config virtualenvs.create false

#RUN useradd --create-home --shell /bin/bash --user-group --groups adm,sudo ds
RUN groupadd -g 1000 ds && \
    useradd --create-home --shell /bin/bash --uid 1000 --gid 1000 ds 
# Default password "password" for ds user
# (setting the password is required if we want to install sshd and login with that user)
RUN echo "ds:password" | chpasswd

USER ds:ds

## Enable autocompletion
#RUN echo "source /etc/bash_completion" >> /home/ds/.bashrc
RUN poetry config virtualenvs.create false

# Add dataset preparation script
#ADD downloadEForms.py /ds/.init/downloadEForms.py
RUN mkdir -p /home/ds/datasets && \
    mkdir -p /home/ds/persistent-home && \
    mkdir -p /home/ds/persistent-shared-folder 

# Add entrypoint script
# (useful if we want to do things with environment variables defined by the user)
ADD run.sh /home/ds/.init/run.sh

ENTRYPOINT ["/home/ds/.init/run.sh"]
WORKDIR /home/ds
